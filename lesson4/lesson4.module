<?php
/**
 * @file
 * Demonstrates use of the Cron API in Drupal - hook_cron().
 */


/**
 * Implements hook_cron().
 *
 * We implement hook_cron() to do "background" processing. It gets called every
 * time the Drupal cron runs. We then decide what has to happen in response.
 *
 * In this example, we log a message after the time given in the state value
 * 'cron_example.next_execution'. Then we update that variable to a time in the
 * future.
 */
function lesson4_cron() {
    // We access our configuration.
    //$config = \Drupal::configFactory()->getEditable('examples.cron');


    $service = \Drupal::service('lesson4.weather_service');
    $service->getWeather5Days();
    $service->getCurrentWeather();
//    \Drupal::configFactory()
//        ->getEditable('lesson4.settings')
//        ->set('lesson4.weather', 'test')
//        ->save();

    // Default to an hourly interval. Of course, cron has to be running at least
    // hourly for this to work.
//    $interval = $cron_config->get('interval');
//    $interval = !empty($interval) ? $interval : 3600;
//
//    // We usually don't want to act every time cron runs (which could be every
//    // minute) so keep a time for the next run in the site state.
//    $next_execution = \Drupal::state()->get('cron_example.next_execution');
//    $next_execution = !empty($next_execution) ? $next_execution : 0;
//    if (REQUEST_TIME >= $next_execution) {
//        // This is a silly example of a cron job.
//        // It just makes it obvious that the job has run without
//        // making any changes to your database.
//        \Drupal::logger('cron_example')->notice('cron_example ran');
//        if (\Drupal::state()->get('cron_example_show_status_message')) {
//            drupal_set_message(t('cron_example executed at %time', ['%time' => date_iso8601(REQUEST_TIME)]));
//            \Drupal::state()->set('cron_example_show_status_message', FALSE);
//        }
//        \Drupal::state()->set('cron_example.next_execution', REQUEST_TIME + $interval);
//    }
}